{
  "x-hideTryItPanel": true,
  "openapi": "3.0.3",
  "info": {
    "title": "Mythical Platform API",
    "version": "1.0.0"
  },
  "tags": [
    {
      "name": "üë§ identity",
      "description": "The Mythical Identity provides synergy between modern auth paradigms and on-chain wallets, enabling an intuitive and frictionless identity experience for players."
    },
    {
      "name": "üèπ item types",
      "description": "An item type is the blueprint from which individual items can be created. On-chain, these are collections from which NFTs can be minted."
    },
    {
      "name": "üéí items",
      "description": "A singular instance of an item, created from an item type, which carries metadata and can be traded in the Mythical Marketplace. On-chain, these are NFTs minted from collections."
    },
    {
      "name": "üõ†Ô∏è setup"
    }
  ],
  "components": {
    "schemas": {
      "FromPlayerToPlayerRequest": {
        "type": "object",
        "properties": {
          "fromPlayerId": {
            "type": "string",
            "format": "uuid",
            "description": "currently associated player"
          },
          "toPlayerId": {
            "type": "string",
            "format": "uuid",
            "description": "player to associate the entity with"
          }
        }
      },
      "RegisterWebhookRequest": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "string",
            "description": "url to send service events to"
          },
          "authorizationHeaderName": {
            "type": "string",
            "format": "string",
            "description": "header name to pass for authorization (if any)"
          },
          "authoriziationKey": {
            "type": "string",
            "format": "string",
            "description": "authorization header value (if any)"
          }
        }
      },
      "PlayerLinkRequest": {
        "type": "object",
        "properties": {
          "registeredAccountJwt": {
            "type": "string",
            "format": "string",
            "description": "bearer token for the registered mythical player"
          }
        }
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "identifier for the webook registration"
          },
          "url": {
            "type": "string",
            "format": "string",
            "description": "url to send service events to"
          },
          "authorizationHeaderName": {
            "type": "string",
            "format": "string",
            "description": "header name to pass for authorization (if any)"
          },
          "authoriziationKey": {
            "type": "string",
            "format": "string",
            "description": "authorization header value (if any)"
          }
        }
      },
      "Player": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the player"
          },
          "type": {
            "type": "string",
            "description": "...",
            "enum": [
              "guest",
              "registered"
            ]
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the player."
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the player."
          },
          "country": {
            "type": "string",
            "description": "The country within which the player lives."
          },
          "banned": {
            "type": "boolean",
            "description": "False if the player is an active user. If they've been banned, True."
          },
          "lastOnlineAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the user was last online."
          },
          "mergedFrom": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the guest player which was linked to this registered player."
          },
          "mergedTo": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the registered player to which the guest player has been linked. Null if the guest player has not been linked."
          },
          "mergedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time at which the guest player was linked."
          }
        }
      },
      "ItemType": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the item type"
          },
          "state": {
            "type": "string",
            "description": "Describes the state of the item type\n  - pending: Awaiting deployment of the collection to finalize on-chain.\n  - failed: Deployment of the collection failed to finalize on-chain.\n  - deployed: The collection is deployed on-chain.\n  - started: Items can be minted.\n  - ended: Items can no longer be minted.\n",
            "enum": [
              "pending",
              "failed",
              "deployed",
              "started",
              "ended"
            ]
          },
          "collectionId": {
            "type": "integer",
            "description": "The id of the collection on-chain. This is immutable."
          },
          "collectionName": {
            "type": "string",
            "description": "The name of the collection on-chain. This is a unique identifier which helps ensure you're looking at the right asset on the block explorer. It's not displayed in the Mythical Marketplace. This is immutable."
          },
          "tokenUri": {
            "type": "string",
            "description": "The description of the collection on-chain"
          },
          "maxSupply": {
            "type": "integer",
            "description": "The maximum quantity of the item which can be granted."
          },
          "issuedSupply": {
            "type": "integer",
            "description": "The quantity of items which have been granted."
          },
          "circulatingSupply": {
            "type": "integer",
            "description": "The quantity of items which have been granted, minus the quantity of items that have been burned."
          },
          "mintMode": {
            "type": "string",
            "description": "Describes how the tokenId is chosen when new items are minted.\n  - serial: Each consecutive tokenId is incremented from the previous.\n  - random: Each consecutive tokenId is a random number between 1 and the maxSupply.\n  - controlled: The tokenId is input by the studio when the item is minted.\n",
            "enum": [
              "serial",
              "random",
              "controlled"
            ]
          },
          "defaultItemMetadata": {
            "$ref": "#/components/schemas/DefaultItemMetadata"
          }
        }
      },
      "DefaultItemMetadata": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemAttribute"
            }
          }
        }
      },
      "Item": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the item"
          },
          "itemTypeId": {
            "type": "string",
            "format": "uuid",
            "description": "Unique identifier of the item"
          },
          "ownerPlayerId": {
            "type": "string",
            "format": "uuid",
            "description": "The id of the player who owns the item"
          },
          "tokenId": {
            "type": "integer",
            "example": 1,
            "description": "The on-chain unique identifier of the item within its given collection. The token id of the item is displayed in the Mythical Marketplace."
          },
          "metadata": {
            "$ref": "#/components/schemas/DefaultItemMetadata"
          }
        }
      },
      "ItemAttribute": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "example": "string"
          },
          "value": {
            "type": "string",
            "example": "attrValue"
          },
          "displayType": {
            "type": "string",
            "example": "number, boolean, string"
          },
          "maxValue": {
            "type": "string",
            "example": 255
          }
        }
      },
      "QueryInput": {
        "description": "An object describing the query to perform",
        "properties": {
          "filter": {
            "type": "object",
            "properties": {
              "filterProp": {
                "type": "string",
                "example": "filterByValue"
              }
            }
          },
          "sort": {
            "type": "object",
            "properties": {
              "sortProp": {
                "type": "integer",
                "description": "description",
                "example": 1
              }
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "offset": {
                "type": "integer"
              },
              "limit": {
                "type": "integer",
                "example": 100
              }
            }
          }
        }
      }
    },
    "parameters": {
      "x-mythical-environment-id": {
        "name": "x-mythical-environment-id",
        "in": "header",
        "description": "Identifier for the environment that this request should interact with",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "requestBodies": {
      "QueryInputRequest": {
        "description": "Generic Query Input Type",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/QueryInput"
                },
                {
                  "type": "object"
                }
              ]
            }
          }
        }
      },
      "CreateItemTypeInput": {
        "description": "The item type to be created",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ItemType"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "readOnly": true
                    },
                    "state": {
                      "readOnly": true
                    },
                    "tokenUri": {
                      "readOnly": true
                    },
                    "collectionId": {
                      "readOnly": true
                    },
                    "issuedSupply": {
                      "readOnly": true
                    },
                    "circulatingSupply": {
                      "readOnly": true
                    },
                    "defaultItemMetadata": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/DefaultItemMetadata"
                        },
                        {
                          "type": "object"
                        }
                      ],
                      "required": [
                        "name",
                        "description",
                        "image",
                        "attributes"
                      ]
                    }
                  },
                  "required": [
                    "collectionName",
                    "mintMode",
                    "defaultItemMetadata"
                  ]
                }
              ]
            }
          }
        }
      },
      "UpdateItemTypeInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ItemType"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "readOnly": true
                    },
                    "state": {
                      "readOnly": true
                    },
                    "tokenUri": {
                      "readOnly": true
                    },
                    "collectionId": {
                      "readOnly": true
                    },
                    "issuedSupply": {
                      "readOnly": true
                    },
                    "circulatingSupply": {
                      "readOnly": true
                    },
                    "mintMode": {
                      "readOnly": true
                    },
                    "maxSupply": {
                      "readOnly": true
                    },
                    "defaultItemMetadata": {
                      "allOf": [
                        {
                          "$ref": "#/components/schemas/DefaultItemMetadata"
                        },
                        {
                          "type": "object"
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "CreateItemInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Item"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "readOnly": true
                    },
                    "tokenId": {
                      "readOnly": true
                    }
                  },
                  "required": [
                    "owner",
                    "itemTypeId"
                  ]
                }
              ]
            }
          }
        }
      },
      "UpdateItemInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Item"
                },
                {
                  "type": "object",
                  "properties": {
                    "id": {
                      "readOnly": true
                    },
                    "tokenId": {
                      "readOnly": true
                    },
                    "itemTypeId": {
                      "readOnly": true
                    },
                    "owner": {
                      "readOnly": true
                    }
                  }
                }
              ]
            }
          }
        }
      },
      "PlayerInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Player"
                }
              ]
            }
          }
        }
      },
      "PlayerLinkInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PlayerLinkRequest"
                }
              ]
            }
          }
        }
      },
      "RegisterWebHookInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/RegisterWebhookRequest"
                }
              ]
            }
          }
        }
      },
      "FromPlayerToPlayerInput": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FromPlayerToPlayerRequest"
                }
              ]
            }
          }
        }
      }
    }
  },
  "paths": {
    "/v1/players": {
      "post": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Create a player",
        "description": "Allows a player to be created without having gone through registration, enabling a frictionless first time user experience including asset ownership.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          }
        }
      }
    },
    "/v1/players/search": {
      "post": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Query players",
        "description": "Retrieve a list of players",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QueryInputRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Player"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/players/{playerId}": {
      "get": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Get a player",
        "description": "Retrieve information about the player such as their email address so that a simple player screen can be displayed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Registered player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          },
          "201": {
            "description": "Guest player",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Player"
                }
              }
            }
          }
        }
      }
    },
    "/v1/players/{playerId}/ban": {
      "put": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Ban a player from the game.",
        "description": "This will set the 'banned' flag to true on the player record and disallow granting, transfer, and burning of items via this api.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "playerId",
            "description": "The identifier of the player for which to retrieve a temporary jwt",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/players/{playerId}/un-ban": {
      "put": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Unban a player from the game.",
        "description": "This will set the 'banned' flag to false on the player record and allow granting, transfer, and burning of items via this api.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "playerId",
            "description": "The identifier of the player for which to retrieve a temporary jwt",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/players/{playerId}/link": {
      "post": {
        "tags": [
          "üë§ identity"
        ],
        "summary": "Link a guest player to a registered player",
        "description": "Enables player linking functionality that's typical in mobile games where guest players who've earned progress and potentially even purchased assets  want to centralize their assets on a registered player. Linking a guest  player to a registered player will bulk transfer all assets from the guest  player to the registered player. The mergedFrom and mergedTo fields are set on the guest and registered player respectively for traceability. Both player records will receive the mergedAt field. A player can only be involved in a  merge once.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "playerId",
            "description": "The identifier of the guest player to be merged",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PlayerLinkInput"
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/item-types": {
      "post": {
        "tags": [
          "üèπ item types"
        ],
        "summary": "Create an item type",
        "description": "Creating an item type means a collection will be deployed on-chain. Once the collection is deployed, items can be minted using the item type id. Note that a collection requires valid default metadata in order to be deployed.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateItemTypeInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/item-types/search": {
      "post": {
        "tags": [
          "üèπ item types"
        ],
        "summary": "Query item types",
        "description": "Retrieve a list of item types",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QueryInputRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ItemType"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/item-types/{itemTypeId}": {
      "get": {
        "tags": [
          "üèπ item types"
        ],
        "summary": "Get an item type by item type id",
        "description": "Returns an item type by identifier",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemType"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "üèπ item types"
        ],
        "summary": "Update an item type",
        "description": "Update the mutable attributes of an item type",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemTypeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateItemTypeInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemType"
                }
              }
            }
          }
        }
      }
    },
    "/v1/items": {
      "post": {
        "tags": [
          "üéí items"
        ],
        "summary": "Grant an item to a player",
        "description": "Mints an item of a given item type to the specified player. If name, description, image, or attributes are not provided, the item will be granted with the default metadata configured on the item type.",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/CreateItemInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      }
    },
    "/v1/items/search": {
      "post": {
        "tags": [
          "üéí items"
        ],
        "summary": "Query items",
        "description": "Retrieve a list of items",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/QueryInputRequest"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/items/{playerId}": {
      "get": {
        "tags": [
          "üéí items"
        ],
        "summary": "Get player inventory",
        "description": "Retrieves a list of items owned by the player",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "playerId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/v1/items/{itemId}": {
      "get": {
        "tags": [
          "üéí items"
        ],
        "summary": "Get an item",
        "description": "Retrieve a single items",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "üéí items"
        ],
        "summary": "Update an item",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/UpdateItemInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          }
        }
      }
    },
    "/v1/items/{itemId}/transfer": {
      "post": {
        "tags": [
          "üéí items"
        ],
        "summary": "Transfer an item from one player to another",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemId",
            "description": "The id of the item to transfer",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/FromPlayerToPlayerInput"
        },
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/items/{itemId}/burn": {
      "post": {
        "tags": [
          "üéí items"
        ],
        "summary": "Burn an item",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    },
    "/v1/webhook": {
      "post": {
        "tags": [
          "üõ†Ô∏è setup"
        ],
        "summary": "Register the URL for the game to receive notifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterWebHookInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        }
      }
    },
    "/v1/webhook/{webhookId}": {
      "put": {
        "tags": [
          "üõ†Ô∏è setup"
        ],
        "summary": "Update the URL for the game to receive notificaitons",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/RegisterWebHookInput"
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "üõ†Ô∏è setup"
        ],
        "summary": "Remove the URL for the game to receive notifications",
        "parameters": [
          {
            "$ref": "#/components/parameters/x-mythical-environment-id"
          },
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }
  }
}
